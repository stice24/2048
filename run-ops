import javax.swing.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class RunTommy2048 implements Runnable {
    int startScore = 0;
    public void run() {
        // NOTE: the 'final' keyword denotes immutability even for local variables.

        try {
            BufferedReader r = new BufferedReader(new FileReader("files/moves.txt"));
            startScore = Integer.parseInt(r.readLine());
        } catch (IOException ioe) {
            System.out.println("ioe");
        }
        // Top-level frame in which game components live
        final JFrame frame = new JFrame("TicTacToe");
        frame.setLocation(300, 300);
        int score = 0;
        String instructor = "Welcome to 2048!\n"
                + "You will use the 'W' 'A' 'S' 'D' keys for game play\n"
                + "'W' moves the tiles on the 2048 board up,\n"
                + "'A' moves the tiles on the 2048 board left,\n"
                + "'S' moves the tiles on the 2048 board down,\n"
                + "and 'D' moves the tiles on the 2048 board right,\n"
                + "when you merge two tiles of the same number, they add up,\n"
                + "and you earn points! Try to make it to the 2048 tile\n"
                + "before the board fills up with tiles and you run out\n"
                + "of moves!\n"
                + "Now, that's the general 2048 game, but I've added some fun new features!\n"
                + "if you look at the top panel, you can see that there's a "
                + "Save, Load, and Undo option\n"
                + "Undo allows you to go back a move, Save allows you to save your"
                + " game progress at a good spot,\n"
                + "and Load brings you back to that spot.\n"
                + "But...I can't just be this nice to you for nothing -- there's a catch...\n"
                + "if you make a bad move where all tiles are on a wall "
                + "and you move towards that wall,\n"
                + "an extra square will still be added. So before you make a move be careful...\n"
                + "And have fun!";
        // Status panel

        final JPanel status_panel = new JPanel();
        frame.add(status_panel, BorderLayout.SOUTH);
        final JLabel status = new JLabel("2048");
        status_panel.add(status);
        final JLabel scoreLbl = new JLabel("Score:" + startScore);
        status_panel.add(scoreLbl);

        // Game board
        final GameBoard board = new GameBoard(status, scoreLbl);
        frame.add(board, BorderLayout.CENTER);

        // Reset button
        final JPanel control_panel = new JPanel();
        frame.add(control_panel, BorderLayout.NORTH);

        // Note here that when we add an action listener to the reset button, we
        // define it as an anonymous inner class that is an instance of
        // ActionListener with its actionPerformed() method overridden. When the
        // button is pressed, actionPerformed() will be called.
        final JButton reset = new JButton("Reset");
        reset.addActionListener(e -> board.reset());
        control_panel.add(reset);

        final JButton load = new JButton("Load");
        load.addActionListener(e -> board.load());
        control_panel.add(load);

        final JButton save = new JButton("Save");
        save.addActionListener(e -> board.save());
        control_panel.add(save);

        final JButton undo = new JButton("Undo");
        undo.addActionListener(e -> board.undo());
        control_panel.add(undo);

        final JButton instructions = new JButton("Instructions");
        instructions.addActionListener(
                e -> JOptionPane.showMessageDialog(null, instructor, "Instructions", 1)
        );
        instructions.addActionListener(
                e -> board.focus()
        );
        control_panel.add(instructions);
        // Put the frame on the screen
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);

        // Start the game
        board.focus();
    }
}
